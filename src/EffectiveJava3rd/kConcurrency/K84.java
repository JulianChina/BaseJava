package EffectiveJava3rd.kConcurrency;

//84 不要依赖线程调度器
public class K84 {
    //任何依赖线程调度器来保证正确性或性能的程序都可能是不可移植的。
    //编写健壮、响应快、可移植程序的最佳方法是确保可运行线程的平均数量不显著大于处理器的数量。
    //保持可运行线程数量低的主要技术是让每个线程做一些有用的工作，然后等待更多的工作。 如果线程没有做有用的工作，它们就不应该运行。
    //线程不应该处于busy到wait的循环，而应该反复检查一个共享对象，等待它的状态发生变化。
    //当面对一个几乎不能工作的程序时，而原因是由于某些线程相对于其他线程没有获得足够的CPU时间，那么通过调用Thread.yield来「修复」程序，你也许能勉强让程序运行起来，但它是不可移植的。
    //Thread.yield没有可测试的语义。
    //试图通过调整线程优先级来解决严重的活性问题是不合理的。

    //不要依赖线程调度器来判断程序的正确性。生成的程序既不健壮也不可移植。
    // 不要依赖Thread.yield或线程优先级。这些工具只是对调度器的提示。
    // 线程优先级可以少量地用于提高已经工作的程序的服务质量，但绝不应该用于「修复」几乎不能工作的程序。
}
