package EffectiveJava3rd.lSerialization;

//85 优先选择Java序列化的替代方案
public class L85 {
    //序列化的一个根本问题是它的可攻击范围太大，且难以保护，而且问题还在不断增多：通过调用ObjectInputStream上的readObject方法反序列化对象图。
    // 这个方法本质上是一个神奇的构造函数，可以用来实例化类路径上几乎任何类型的对象，只要该类型实现Serializable接口。
    //Java反序列化是一个明显且真实的危险源，因为它被应用程序直接和间接地广泛使用，比如RMI(远程方法调用)、JMX(Java管理扩展)和JMS(Java消息传递系统)。
    // 不可信流的反序列化可能导致远程代码执行(RCE)、拒绝服务(DoS)和一系列其他攻击。应用程序很容易受到这些攻击，即使它们本身没有错误。
    //攻击者和安全研究人员研究Java库和常用的第三方库中的可序列化类型，寻找在反序列化过程中调用的潜在危险活动的方法称为gadget。

    //避免序列化利用的最好方法是永远不要反序列化任何东西。
    //没有理由在你编写的任何新系统中使用Java序列化。

    //领先的跨平台结构化数据表示是JSON和Protocol Buffers，也称为protobuf。
    // JSON由Douglas Crockford设计用于浏览器与服务器通信，
    // Protocol Buffers由谷歌设计用于在其服务器之间存储和交换结构化数据。
    // JSON和protobuf之间最显著的区别是JSON是基于文本的，并且是人类可读的，而protobuf是二进制的，但效率更高。
    // JSON是一种专门的数据表示，而protobuf提供模式(类型)来记录和执行适当的用法。

    //永远不要反序列化不可信的数据。
    //优先选择白名单而不是黑名单，因为黑名单只保护你免受已知的威胁。

    //序列化是危险的，应该避免。如果你从头开始设计一个系统，可以使用跨平台的结构化数据，如 JSON或protobuf。不要反序列化不可信的数据。
}
