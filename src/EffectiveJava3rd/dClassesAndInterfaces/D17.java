package EffectiveJava3rd.dClassesAndInterfaces;

//17 最小化可变性
public class D17 {
    //不可变类简单来说是它的实例不能被修改的类。
    //要使一个类不可变，请遵循以下5条规则：
    //1.不要提供修改对象状态的方法(也称为mutators)。
    //2.确保这个类不能被继承。
    //3.把所有属性设置为final。
    //4.把所有的属性设置为private。
    //5.确保对任何可变组件的互斥访问。

    //不可变对象很简单。
    //不可变对象本质上是线程安全的；它们不需要同步。
    //不可变对象可以被自由地共享。
    //不仅可以共享不可变的对象，而且可以共享内部信息。
    //不可变对象为其他对象提供了很好的构件(building blocks)。
    //不可变对象提供了免费的原子失败机制。
    //不可变类的主要缺点是对于每个不同的值都需要一个单独的对象。
    //除非有充分的理由使类成为可变类，否则类应该是不可变的。
    //如果一个类不能设计为不可变类，那么也要尽可能地限制它的可变性。
    //除非有充分的理由不这样做，否则应该把每个属性声明为私有final的。
    //构造方法应该创建完全初始化的对象，并建立所有的不变性。

    //CountDownLatch类是这些原理的例证。它是可变的，但它的状态空间有意保持最小范围内。创建一个实例，使用它一次，并完成：一旦countdown锁的计数器已经达到零，不能再重用它。
}
