package EffectiveJava3rd.dClassesAndInterfaces;

//20 接口优于抽象类
public class D20 {
    //Java有两种机制来定义允许多个实现的类型：接口和抽象类。
    //通过提供一个抽象的骨架实现类(abstract skeletal implementation class)来与接口一起使用，将接口和抽象类的优点结合起来。
    //接口定义了类型，可能提供了一些默认的方法，而骨架实现类在原始接口方法的顶层实现了剩余的非原始接口方法。
    //继承骨架实现需要大部分的工作来实现一个接口。这就是模板方法设计模式。

    //由于骨架实现类是为了继承而设计的，所以你应该遵循条目19中的所有设计和文档说明。
    //一个接口通常是定义允许多个实现的类型的最佳方式。
    //如果你导出一个重要的接口，应该强烈考虑提供一个骨架的实现类。
    //在可能的情况下，应该通过接口上的默认方法提供骨架实现，以便接口的所有实现者都可以使用它。也就是说，对接口的限制通常要求骨架实现类采用抽象类的形式。
}
