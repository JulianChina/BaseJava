package EffectiveJava3rd.dClassesAndInterfaces;

//24 支持使用静态成员类而不是非静态类
public class D24 {
    //嵌套类(nested class)是在另一个类中定义的类。嵌套类应该只存在于其宿主类(enclosing class)中。
    //如果一个嵌套类在其他一些情况下是有用的，那么它应该是一个顶级类。
    //有四种嵌套类：静态成员类，非静态成员类，匿名类，局部类。除了第一种以外，剩下的三种都被称为内部类(inner class)。

    //静态成员类是其宿主类的静态成员，并遵循与其他静态成员相同的可访问性规则。如果它被声明为private，则只能在宿主类中访问，等等。
    //非静态成员类实例和其宿主实例之间的关联是在创建成员类实例时建立的，并且之后不能被修改。通常情况下，通过在宿主类的实例方法中调用非静态成员类构造方法来自动建立关联。
    //如果你声明了一个不需要访问宿主实例的成员类，总是把static修饰符放在它的声明中，使它成为一个静态成员类，而不是非静态的成员类。
    //一个匿名类没有名字。它不是其宿主类的成员。它不是与其他成员一起声明，而是在使用时同时声明和实例化。在表达式合法的代码中，匿名类是允许的。
    //当且仅当它们出现在非静态上下文中时，匿名类才会封装实例。但是，即使它们出现在静态上下文中，它们也不能有除常量型变量之外的任何静态成员。
    //在将lambda表达式添加到Java之前，匿名类是创建小方法对象和处理对象的首选方法，但lambda表达式现在是首选(条目42)。匿名类的另一个常见用途是实现静态工厂方法(条目20中的intArrayAsList)。
    //一个局部类可以在任何可以声明局部变量的地方声明，并遵守相同的作用域规则。局部类与其他类型的嵌套类具有共同的属性。

    //如果一个嵌套的类需要在一个方法之外可见，或者太长而不能很好地适应一个方法，使用一个成员类。
    //如果一个成员类的每个实例都需要一个对其宿主实例的引用，使其成为非静态的；否则，使其静态。
    //假设这个类属于一个方法内部，如果你只需要从一个地方创建实例，并且存在一个预置类型来说明这个类的特征，那么把它作为一个匿名类；否则，把它变成局部类。
}
